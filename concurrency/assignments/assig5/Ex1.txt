I claim that the check has to be done inside the locked part. To see what could go wrong otherwise, let's assume that the check is done ouside the locked part.

We consider the following situation: There's two dequeuer-threads and only one element left in the queue. 
Thread 1 would check - the queue is not empty. It would acquire the lock and start to dequeue. If thread 2 starts its dequeue method and checks for the queue to be empty before thread 1 reaches the line "head = head.next", thread 2 might think that the queue is not yet empty. But that is then only due to thread 1 not having finished its dequeue-method! If thread two then finally manages to acquire the dequeue-lock, the queue is actually empty. Therefore, the check has to be done inside the lock. However, if the queue is empty for a while, it might cause an overhead for every thread to lock und unlock just to realize that the queue is still empty. Hence, it might make sense to check for an empty queue outside the lock. But then, it's necessary to check after acquiring the lock that the state from before is still valid (i.e. that noone has dequeued the last element in the meanwhile).