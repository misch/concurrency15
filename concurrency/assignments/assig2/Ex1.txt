 ### Observations ###

** Volatile vs. Non-volatile counter **
Surprisingly, the difference in execution time when comparing the non-volatile- and the volatile counter (that is, the variable "value" in the class assig2.Counter.java), is almost not noticeable. I am not sure how to explain that, as in the lecture some other results were suggested.

** One vs. many proessors **
Setting the affinity to only one processor on the sunfire machine caused the execution time to increase dramatically. To get faster results, I had to use much lower counter thresholds. In the here shown data for the single-processor, the counter was only incremented until value of 2'000 (indicated in the below statistics).

** Fairness **
In the multi-processor experiment, the workload was quite well balanced. All the threads had roughly the same number of accesses to the Counter. This was not at all the case in the single-processor experiment. There, most of the time one thread did the most, if not all, of the increments. This might be caused by the simple fact that with multiple processors there can be launched many threads at the very same time that are all ready to take the lock whereas with one processor, not all of the threads can be active at the very same moment and it might therefore more easily happen that there's no other thread at the very moment who is ready to take the lock. 

** Number of threads **
As expected, a bigger number of threads does not accelerate the program but instead introduces overloads and therefore slows the whole execution. In all the experiments, the smallest number of threads yield the fastest execution time. This is a very significant example to see that shared recources - or better, parts of a program that can only be executed sequentially, like the counter increments - are a bottleneck in concurrent applications.


Statistics:

### Multi-processor ###


** Case: non-volatile counter
** Counter value: 300000

#threads: 1
Lowest number of accesses: 300000
Highest number of accesses: 300000
Execution time: 150.34386899999998 ms

Lowest number of accesses: 300000
Highest number of accesses: 300000
Execution time: 150.620699 ms


#threads: 2
Lowest number of accesses: 149636
Highest number of accesses: 150364
Execution time: 219.562435 ms

Lowest number of accesses: 149601
Highest number of accesses: 150399
Execution time: 219.94083799999999 ms


#threads: 3
Lowest number of accesses: 99629
Highest number of accesses: 100405
Execution time: 219.229646 ms

Lowest number of accesses: 99606
Highest number of accesses: 100399
Execution time: 218.588403 ms


#threads: 4
Lowest number of accesses: 74659
Highest number of accesses: 75291
Execution time: 288.63685499999997 ms

Lowest number of accesses: 74840
Highest number of accesses: 75201
Execution time: 290.522442 ms


#threads: 8
Lowest number of accesses: 37497
Highest number of accesses: 37502
Execution time: 544.881617 ms

Lowest number of accesses: 37497
Highest number of accesses: 37504
Execution time: 539.968366 ms


#threads: 16
Lowest number of accesses: 18638
Highest number of accesses: 18759
Execution time: 1343.169832 ms

Lowest number of accesses: 18676
Highest number of accesses: 18758
Execution time: 1350.342038 ms


** Case: volatile counter
** Counter value: 300000

#threads: 2
Lowest number of accesses: 149776
Highest number of accesses: 150224
Execution time: 216.273238 ms

Lowest number of accesses: 149712
Highest number of accesses: 150288
Execution time: 216.735289 ms


#threads: 3
Lowest number of accesses: 99505
Highest number of accesses: 100448
Execution time: 234.70592299999998 ms

Lowest number of accesses: 99714
Highest number of accesses: 100477
Execution time: 234.83372799999998 ms


#threads: 4
Lowest number of accesses: 74896
Highest number of accesses: 75149
Execution time: 289.908318 ms

Lowest number of accesses: 74911
Highest number of accesses: 75124
Execution time: 290.352348 ms


#threads: 8
Lowest number of accesses: 37496
Highest number of accesses: 37503
Execution time: 539.678594 ms

Lowest number of accesses: 37341
Highest number of accesses: 37527
Execution time: 533.039994 ms


#threads: 16
Lowest number of accesses: 18709
Highest number of accesses: 18754
Execution time: 1342.479052 ms

Lowest number of accesses: 18634
Highest number of accesses: 18759
Execution time: 1317.135828 ms


### Single processor (with affinity set) ###


** Case: volatile counter
** Counter value: 2000


#threads: 2
Lowest number of accesses: 0
Highest number of accesses: 2000
Execution time: 75.71964299999999 ms

Lowest number of accesses: 0
Highest number of accesses: 2000
Execution time: 75.821536 ms


#threads: 4
Lowest number of accesses: 0
Highest number of accesses: 2000
Execution time: 80.952547 ms

Lowest number of accesses: 0
Highest number of accesses: 2000
Execution time: 80.754936 ms


#threads: 8
Lowest number of accesses: 0
Highest number of accesses: 2000
Execution time: 88.463111 ms

Lowest number of accesses: 0
Highest number of accesses: 2000
Execution time: 88.914509 ms


#threads: 16
Lowest number of accesses: 0
Highest number of accesses: 1963
Execution time: 112.684249 ms

Lowest number of accesses: 0
Highest number of accesses: 2000
Execution time: 111.87907899999999 ms


** Case: non-volatile counter
** Counter value: 2000


#threads: 2
Lowest number of accesses: 0
Highest number of accesses: 2000
Execution time: 75.734466 ms

Lowest number of accesses: 0
Highest number of accesses: 2000
Execution time: 75.688296 ms


#threads: 4
Lowest number of accesses: 0
Highest number of accesses: 2000
Execution time: 80.851053 ms

Lowest number of accesses: 0
Highest number of accesses: 2000
Execution time: 80.74324299999999 ms


#threads: 8
Lowest number of accesses: 0
Highest number of accesses: 2000
Execution time: 88.430816 ms

Lowest number of accesses: 0
Highest number of accesses: 2000
Execution time: 88.78233999999999 ms


#threads: 16
Lowest number of accesses: 0
Highest number of accesses: 2000
Execution time: 111.866529 ms

Lowest number of accesses: 0
Highest number of accesses: 2000
Execution time: 111.78976899999999 ms